#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <ctime>

using namespace std;

int firstDayofNewYearAndMonth (int );
int numOfDaysInAMonth (int);
void printHeader (int);
void printMonth (int, int&);
void skipToDay (int);
int year;

int checkYear()
{
    int currentYear;
    time_t currentTime;
    struct tm *localTime;

    time( &currentTime );                   // Get the current time
    localTime = localtime( &currentTime );

    currentYear = localTime->tm_year + 1900;
    return(currentYear);
}

int checkMonth()
{
    int currentMonthcheck;
    time_t currentTime;
    struct tm *localTime;

    time( &currentTime);
    localTime = localtime( &currentTime);

    currentMonthcheck = localTime ->tm_mon +1;
    return (currentMonthcheck);
}

/*int checkDay()
{
    int currentDaycheck;
    time_t currentTime;
    struct tm *localTime;

    time( &currentTime);
    localTime = localtime( &currentTime);

    currentDaycheck = localTime ->tm_mday;
    return (currentDaycheck);
}*/
const char * checkFirstday()
{
    const char* firstDay;
    time_t rawtime;
    struct tm * timeinfo;
    int year, month ,day;
    const char * weekday[] = { "Sunday", "Monday",
                             "Tuesday", "Wednesday",
                             "Thursday", "Friday", "Saturday"};

  /* prompt user for date
  printf ("Enter year: "); fflush(stdout); scanf ("%d",&year);
  printf ("Enter month: "); fflush(stdout); scanf ("%d",&month);
  printf ("Enter day: "); fflush(stdout); scanf ("%d",&day);*/

  /* get current timeinfo and modify it to the user's choice */
  time ( &rawtime );
  timeinfo = localtime ( &rawtime );
  timeinfo->tm_year = checkYear();
  timeinfo->tm_mon = checkMonth();
  timeinfo->tm_mday = 1;

  /* call mktime: timeinfo->tm_wday will be set */
  mktime ( timeinfo );

  firstDay = weekday[timeinfo->tm_wday];

  return (firstDay);
}

int main ()
{
    int firstDayInCurrentMonth;
    int currentMonth = checkMonth();
    int numDays;
    int wday;
    const char* firstDay;
    //cout << "What year do you want a calendar for? ";
    //cin >> year;
    firstDay = checkFirstday();
    year = checkYear();
    cout << endl;
    firstDayInCurrentMonth = firstDayofNewYearAndMonth(year);

    cout << year << " " << firstDay << endl;
    numDays = numOfDaysInAMonth(currentMonth);
    printHeader(currentMonth);
    printMonth(numDays, firstDayInCurrentMonth);
    cout << endl << endl << endl;

   /* while (currentMonth <= 12)
    {
        numDays = numOfDaysInAMonth(currentMonth);
        printHeader(currentMonth);
        printMonth(numDays, firstDayInCurrentMonth);
        cout << endl << endl << endl;
        currentMonth++;
    }*/

    cout << endl;

    return 0;

}

bool leapYearCheck()
{
    bool leapYear;
    if ( ((year % 4) == 0) && ((year % 100) != 0) )
    	{
    	leapYear = true;
    	}
    else if ((year % 400) == 0)
    	{
    	leapYear = true;
    	}
    else
    	{
    	leapYear = false;
    	}
    return leapYear;
}


/**************************************************************************/
/* This function calculates the first day of the new year                 */
/* And checks if the year is a leap-year                                  */
/**************************************************************************/

    int  firstDayofNewYearAndMonth(int year) {
        int day_start;
        int x1, x2, x3;
        // leap-year conditions
        x1 = (year - 1)/ 4;
        x2 = (year - 1)/ 100;
        x3 = (year - 1)/ 400;
        day_start = (year + x1 - x2 + x3) %7;
        return day_start;
    }

/**************************************************************************/
/* This function returns the number of days in a month                    */
/**************************************************************************/

    //currentMonth = m (two different integers, but they are the same value
    //This is to make sure that we don't have a big load of the same integers
    //Since these functions, voids and so on, are like a seperate main functions).
    int numOfDaysInAMonth (int m){
        if (m == 1)
           return(31);
        else if ((m == 2) && (leapYearCheck() == false))
             return(28);
        else if ((m == 2) && (leapYearCheck() == true))
            return(29);
        else if (m == 3)
             return(31);
        else if (m == 4)
             return(30);
        else if (m == 5)
             return(31);
        else if (m == 6)
             return(30);
        else if (m == 7)
             return(31);
        else if (m == 8)
            return(31);
        else if (m == 9)
            return(30);
        else if (m == 10)
            return(31);
        else if (m == 11)
            return(30);
        else if (m == 12)
            return(31);
    }

/**************************************************************************/
/*    It takes the number of the month and prints outs the name of the    */
/*  month and the frame of the calander                                   */
/**************************************************************************/

    void printHeader (int m) {
        if (m == 1){

    cout << "January" << endl;
    }
    else if (m == 2) {
         cout << "February" << endl; }
    else if (m == 3) {
         cout << "March" << endl; }
    else if (m == 4) {
         cout << "April" << endl; }
    else if (m == 5) {
         cout << "May" << endl; }
    else if (m == 6) {
         cout << "June" << endl; }
    else if (m == 7) {
         cout << "July" << endl; }
    else if (m == 8) {
         cout << "August" << endl; }
    else if (m == 9) {
         cout << "September" << endl; }
    else if (m == 10) {
         cout << "October" << endl; }
    else if (m == 11) {
         cout << "November" << endl; }
    else if (m == 12) {
         cout << "December" << endl; }


    cout << " S  M  T  W  T  F  S" <<endl;
    cout << "____________________" << endl;
    }

/**************************************************************************/
/* Helps with the skipToDay function blah blah blah                       */
/**************************************************************************/

    void skip (int i) {
        while (i > 0) {
            cout << " ";
            i = i - 1;
        }
    }
/**************************************************************************/
/* This function prints out the days in the month after the header for    */
/* each month                                                             */
/**************************************************************************/

    void printMonth (int numDays, int &weekDay) {
        int day = 1;
        skipToDay(weekDay);
        while (day <= numDays) {
            cout << setw(2) << day << " ";
            if (weekDay == 6){
                cout << endl;
                weekDay = 0;
            }
            else weekDay++;
            day++;
        }
    }

/**************************************************************************/
/* Prints spaces in monthly calendar                                      */
/**************************************************************************/

    void skipToDay (int d){
        return skip(3*d);
    }
