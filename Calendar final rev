#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <ctime>
#include <cmath>
#include <vector>
#include <windows.h>
#include <conio.h>

using namespace std;

int numOfDaysInAMonth (int);
void printHeader (int);
void printMonth (int);
void skipToDay (int);
int year;
int result;
char* tid;
char clok[] = {  };
char tid1;
int io;
int check_m;
int check_m1;
int check_q;
int check_q1;
int q;
int q1;
int m;
int m1;
int control1;
char timeArray[24];

struct Event
{
    string dateNotice;
    int date1;
    int date2;
    int date3;
    char userTimeArray [8];
};

/**************************************************************************/
/* Checks clock tics on the pc since January 1 since 1970                 */
/**************************************************************************/
int checkTime()
{
    io=1;
    while (io=1)
    {
        time_t     now = time(0);
        std::time_t result = std::time(NULL);
        string stringForArray;
        stringForArray = ctime(&result);
        int TempNumOne=stringForArray.size();
        m = timeArray[14];
        m1 = timeArray[15];
        q = timeArray[17];
        q1 = timeArray[18];

        for (int a=0;a<=TempNumOne;a++)
        {
            timeArray[a]=stringForArray[a];
        }

        for (int n = 11; n<=18 ; n++)
        {
            cout << timeArray[n];
        }

        cout << endl;
        Sleep(350);
        break;
    }
}

/**************************************************************************/
/* Checks clock tics on the pc since January 1 since 1970                 */
/**************************************************************************/
int checkYear()
{
    int currentYear;
    time_t currentTime;
    struct tm *localTime;

    time( &currentTime );                   // Get the current time
    localTime = localtime( &currentTime );

    currentYear = localTime->tm_year + 1900;
    return(currentYear);
}

/**************************************************************************/
/* Checks clock tics on the pc since January 1 since 1970                 */
/**************************************************************************/
int checkMonth()
{
    int currentMonthcheck;
    time_t currentTime;
    struct tm *localTime;

    time( &currentTime);
    localTime = localtime( &currentTime);

    currentMonthcheck = localTime -> tm_mon +1;
    return (currentMonthcheck);
}

/**************************************************************************/
/* Checks clock tics on the pc since January 1 since 1970                 */
/**************************************************************************/

int checkDay()
{
    int currentDaycheck;
    time_t currentTime;
    struct tm *localTime;

    time( &currentTime);
    localTime = localtime( &currentTime);

    currentDaycheck = localTime -> tm_mday;
    return (currentDaycheck);
}

/**************************************************************************/
/* Zeller's Algorithm                                                     */
/* Checks day of a month and outputs whether it is monday, sunday etc.    */
/**************************************************************************/

int dayNumber(int m, int d, int y)
{
    if (m == 1 || m == 2)
    {
        m = m + 12;
        y = y - 1;
    }
    return (d + (int)floor((13 * (m + 1)) / 5) + y%100 + (int)floor((y%100)/ 4)
    + (int)floor(((int)floor(y/100))/4) + 5*(int)floor(y/100)) % 7;
}

/**************************************************************************/
/* The main algorithm for the calendar program                            */
/**************************************************************************/

int main ()
{
    cout << "Welcome to the Turtlebot Trille's user interface." << endl;
    cout << "What would you like to do?" << endl;
    cout << "\n1: Make a new appointment." << endl;
    cout << "2: Check appointments in the current month." << endl;
    cout << "3: Print calendar for current month." << endl;
    cout << "4: Change or delete appointment." << endl;
    cout << "5: Program UI sleep." << endl;
    cout << "\nToday is the " << checkDay() << "-" << checkMonth() << "-" << checkYear() << endl;

    int counter = 0;
    int userInput;
    int userInputTwo;
    vector<Event>listOfEvents;
    Event p;

    while (true)
    {
        if (userInputTwo == 3)
        {
            system("CLS");
            cout << "Welcome to the Turtlebot Trille's user interface." << endl;
            cout << "What would you like to do?" << endl;
            cout << "\n1: Make a new appointment." << endl;
            cout << "2: Check appointments in the current month." << endl;
            cout << "3: Print calendar for current month." << endl;
            cout << "4: Change an appointment." << endl;
            cout << "5: Program UI sleep." << endl;
            cout << "\nToday is the " << checkDay() << "-" << checkMonth() << "-" << checkYear() << endl;
            userInputTwo++;
        }

        cin >> userInput;

        if (userInput == 1)
        {
            system("CLS");
            string data;
            //char userInputThree[8];

            cout << "What is it you wan't to do?: ";
            cin.ignore();
            getline(cin,data);

            p.dateNotice = data;

            cout << "\nEnter the month of the event: ";
            cin >> userInputTwo;

            p.date1 = userInputTwo;

            cout << "\nEnter the day of the event: ";
            cin >> userInputTwo;

            p.date2 = userInputTwo;

            cout << "\nEnter the year of the event: ";
            cin >> userInputTwo;

            p.date3 = userInputTwo;

            cout << "\nEnter the allocated time for the event: ";
            cin >> p.userTimeArray;

            //p.userTimeArray = userInputThree;

            listOfEvents.push_back(p);

            counter++;

            userInputTwo = 3;
        }

        else if (userInput == 2)
        {
            system("CLS");

            cout << "If you wish to change something in one of your appointments," << endl;
            cout << "please note the reference number for the specifik appointent.\n" << endl;

            for (int n=0; n<counter; n++)
            {
                cout << "The " << listOfEvents.at(n).date2 << " of " << listOfEvents.at(n).date1 << " year " << listOfEvents.at(n).date3 << endl;
                cout << listOfEvents.at(n).dateNotice << endl;
                cout << "Ref nr: " << n << "\n" << endl;
            }

            system("PAUSE");

            userInputTwo = 3;
        }

        else if (userInput == 3)
        {
            while (true)
            {
                system("CLS");

                int currentMonth = 1;
                int numDays;

                year = checkYear();

                cout << " Year: " << year << endl;

                while (currentMonth <= 12)
                {
                    numDays = numOfDaysInAMonth(currentMonth);

                    if (currentMonth == checkMonth())
                    {
                        printHeader(checkMonth());
                        printMonth(numDays);
                    }
                    currentMonth++;
                }

                cout << "\n" << endl;

                checkTime();

                if (kbhit())
                {
                    userInputTwo = 3;
                    break;
                }
            }
        }

        else if (userInput == 4)
        {
           int RefNr;
            string newUserInput;
            int newUserInputTwo;
            system("CLS");
            cout << "Enter reference number to the appointment you want to change." << endl;
            cout << "Ref nr: ";
            cin >> RefNr;

            cout << "The " << listOfEvents.at(RefNr).date1 << "-" << listOfEvents.at(RefNr).date2 << " year " << listOfEvents.at(RefNr).date3 << endl;
            cout << listOfEvents.at(RefNr).dateNotice << endl;

            system("PAUSE");
            system("CLS");

            cout << "Enter new description for date: ";
            cin.ignore();
            getline(cin,newUserInput);

            listOfEvents.at(RefNr).dateNotice = newUserInput;

            cout << "\nEnter new month: ";
            cin >> newUserInputTwo;

            listOfEvents.at(RefNr).date1 = newUserInputTwo;

            cout << "\nEnter new day of month: ";
            cin >> newUserInputTwo;

            listOfEvents.at(RefNr).date2 = newUserInputTwo;

            cout << "\nEnter new year: ";
            cin >> newUserInputTwo;

            listOfEvents.at(RefNr).date3 = newUserInputTwo;

            system("PAUSE");
            userInputTwo = 3;
        }

        else if (userInput == 5)
        {
            /*HWND stealth;
            AllocConsole();
            stealth=FindWindowA("ConsoleWindowClass",NULL);
            ShowWindow(stealth,0);*/

            while(true)
            {
                checkTime();

                char l;
                char l1;
                char u;
                char u1;
                l = listOfEvents.at(0).userTimeArray[3];
                l1 = listOfEvents.at(0).userTimeArray[4];
                u = listOfEvents.at(0).userTimeArray[6];
                u1 = listOfEvents.at(0).userTimeArray[7];

                /*if ((m == l) && (m1 == l1) && (q == u) && (q1 == u1))
                {
                    cout << listOfEvents.at(0).dateNotice << endl;
                }*/

                int s = checkYear();
                int s1 = checkMonth();
                int s2 = checkDay();


                for (int n = 1; n  <= counter; n++)
                {
                    n = n - 1;

                    if ((listOfEvents.at(n).date3 == s) && (listOfEvents.at(n).date1 == s1) && (listOfEvents.at(n).date2 == s2) && (m == l) && (m1 == l1) && (q == u) && (q1 == u1))
                    {
                        cout << listOfEvents.at(n).dateNotice << endl;
                        n++;

                        break;
                    }
                }

                if (kbhit())
                {
                    break;
                }
            }

            /*stealth=FindWindowA("ConsoleWindowClass",NULL);
            ShowWindow(stealth,1);*/

            userInputTwo = 3;
            userInput = 0;
        }
    }

    return 0;
}

/**************************************************************************/
/* Function to check for leap years.                                      */
/**************************************************************************/

bool leapYearCheck()
{
    bool leapYear;
    if ( ((year % 4) == 0) && ((year % 100) != 0) )
    	{
    	leapYear = true;
    	}
    else if ((year % 400) == 0)
    	{
    	leapYear = true;
    	}
    else
    	{
    	leapYear = false;
    	}
    return leapYear;
};

/**************************************************************************/
/* This function returns the number of days in a month                    */
/**************************************************************************/

int numOfDaysInAMonth (int m)
{
    if (m == 1)
        return(31);

    else if ((m == 2) && (leapYearCheck() == false))
            return(28);

    else if ((m == 2) && (leapYearCheck() == true))
        return(29);

    else if (m == 3)
        return(31);

    else if (m == 4)
        return(30);

    else if (m == 5)
        return(31);

    else if (m == 6)
        return(30);

    else if (m == 7)
        return(31);

    else if (m == 8)
        return(31);

    else if (m == 9)
        return(30);

    else if (m == 10)
        return(31);

    else if (m == 11)
        return(30);

    else if (m == 12)
        return(31);
}

/**************************************************************************/
/*    It takes the number of the month and prints outs the name of the    */
/*  month and the frame of the calander                                   */
/**************************************************************************/

void printHeader (int m)
{
    if (m == 1)
        cout << " January" << endl;

    else if (m == 2)
         cout << " February" << endl;

    else if (m == 3)
         cout << " March" << endl;

    else if (m == 4)
         cout << " April" << endl;

    else if (m == 5)
         cout << " May" << endl;

    else if (m == 6)
         cout << " June" << endl;

    else if (m == 7)
         cout << " July" << endl;

    else if (m == 8)
         cout << " August" << endl;

    else if (m == 9)
         cout << " September" << endl;

    else if (m == 10)
         cout << " October" << endl;

    else if (m == 11)
         cout << " November" << endl;

    else if (m == 12)
         cout << " December" << endl;

    cout << " S  M  T  W  T  F  S" <<endl;
    cout << "____________________" << endl;
}

/**************************************************************************/
/* Helps with the skipToDay function                                      */
/**************************************************************************/

    void skip (int i) {
        while (i > 0) {
            cout << " ";
            i = i - 1;
        }
    }
/**************************************************************************/
/* This function prints out the days in the month after the header for    */
/* each month                                                             */
/**************************************************************************/

void printMonth (int numDays)
{
    int day = 1;
    int weekDay;

    weekDay = dayNumber(checkMonth(),01,checkYear()) - 1; // -1 because Zeller's algorithm goes from 1 to 7 while the function works from 0 to 6.

    skipToDay(weekDay);
    while (day <= numDays)
    {
        cout << setw(2) << day << " ";
        if (weekDay == 6)
        {
            cout << endl;
            weekDay = 0;
        }
        else weekDay++;
        day++;
    }
}

/**************************************************************************/
/* Prints spaces in monthly calendar                                      */
/**************************************************************************/

void skipToDay (int d)
{
    return skip(3*d);
}
